{"version":3,"sources":["skylark-graphics-gradients.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../skylark-graphics-gradients.js","sourcesContent":["define('skylark-graphics-gradients/gradients',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"graphics.gradients\",{});\r\n});\r\n\r\n\ndefine('skylark-graphics-gradients/gradient-point',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./gradients\"\r\n], function(langx, gradients) {\r\n\r\n\tvar GradientPoint = langx.klass({\r\n\t\t\"klassName\"\t:\t\"GradientPoint\",\r\n\r\n\t\t\"x\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.x;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"y\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.y;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new GradientPoint(_.x,_.y);\r\n\t\t\r\n\t\t},\r\n\t\t\r\n\t\t\"notEqual\"\t:\tfunction(/*GradientPoint*/gp) {\r\n\t\t\treturn !gp || gp.x && gp.x.notEqual(this.width) || gp.y && gp.y.notEqual(this.height);\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*GradientPoint*/gp){\r\n\t\t\treturn  !this.notEqual(gp);\r\n\t\t},\r\n\r\n\t\t\"toString\" : function(){\r\n\t\t\tvar xs,ys,x = this.x,y= this.y;\r\n\t\t\txs = x.toString();\r\n\t\t\tif (xs == \"min\") {\r\n\t\t\t\txs = \"left\";\r\n\t\t\t} else if (xs == \"mid\") {\r\n\t\t\t\txs = \"center\";\r\n\t\t\t} else if (xs == \"max\") {\r\n\t\t\t\txs = \"right\";\r\n\t\t\t}\r\n\r\n\t\t\tys = y.toString();\r\n\t\t\tif (ys == \"min\") {\r\n\t\t\t\tys = \"top\";\r\n\t\t\t} else if (xs == \"mid\") {\r\n\t\t\t\tys = \"center\";\r\n\t\t\t} else if (xs == \"max\") {\r\n\t\t\t\tys = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\treturn xs + \" \" + ys;\r\n\t\t},\t\r\n\t\t\r\n\t\t\"_construct\" : function(x,y){\r\n\t\t\tvar props = {};\r\n\t\t\tif (x != undefined) {\r\n\t\t\t\tif (Type.isString(x)) {\r\n\t\t\t\t\tif (x == \"left\") {\r\n\t\t\t\t\t\tx = \"min\";\r\n\t\t\t\t\t} else if (x == \"center\") {\r\n\t\t\t\t\t\tx = \"mid\";\r\n\t\t\t\t\t} else if (x == \"right\") {\r\n\t\t\t\t\t\tx = \"max\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprops.x = x;\r\n\t\t\t}\r\n\t\t\tif (y != undefined) {\r\n\t\t\t\tif (Type.isString(y)) {\r\n\t\t\t\t\tif (y == \"top\") {\r\n\t\t\t\t\t\ty = \"min\";\r\n\t\t\t\t\t} else if (y == \"center\") {\r\n\t\t\t\t\t\ty = \"mid\";\r\n\t\t\t\t\t} else if (y == \"bottom\") {\r\n\t\t\t\t\t\ty = \"max\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprops.y = y;\r\n\t\t\t}\r\n\t\t\tthis._ = props;\r\n\t\t}\t\t\r\n\t});\r\n\r\n\tGradientPoint.fromString = function(s) {\r\n\t\tvar a = s.split(\" \");\r\n        return GradientPoint.fromArray(a)\r\n\t};\r\n\r\n\tGradientPoint.fromPlain = function(o) {\r\n\t\treturn new GradientPoint(o.x,o.y);\r\n\t};\r\n\r\n\tGradientPoint.fromArray = function(a) {\r\n\t\treturn new GradientPoint(a[0],a.length>1?a[1]:\"center\");\r\n\t};\r\n\r\n\r\n\treturn gradients.GradientPoint = GradientPoint;\r\n\t\r\n});\t\r\n\r\n\ndefine('skylark-graphics-gradients/gradient-stop',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-colors/color\",\r\n\t\"./gradients\",\r\n],function(langx,Color,gradients) {\r\n\tvar GradientStop = langx.klass({\r\n\t\t\"klassName\": \"GradientStop\",\r\n\t\t\"offset\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.offset;\r\n\t\t\t}\t\t\r\n\t\t},\r\n\t\t\r\n\t\t\"color\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.color;\r\n\t\t\t}\t\t\r\n\t\t},\r\n        \r\n        equal: function(target) {\r\n            return !this.notEqual(target);\r\n        },\r\n\r\n        notEqual: function(target) {\r\n\t\t\treturn !target || \r\n\t\t\t\t\ttarget.offset != this.offset || \r\n\t\t\t\t\ttarget.color.notEqual(this.color);\r\n        },\r\n\t\t\r\n\t\t\"_construct\"\t :\tfunction(offset,color){\r\n\t\t\tif (langx.isString(offset)) {\r\n\t\t\t\tvar parsed = Number.parsePercent(offset);\r\n\t\t\t\tif (parsed != null) {\r\n\t\t\t\t\toffset = parsed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._ = {\r\n\t\t\t\t\"offset\"\t:\toffset,\r\n\t\t\t\t\"color\"\t\t:\tcolor\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\t\r\n\treturn gradients.GradientStop = GradientStop;\r\n});\r\n\ndefine('skylark-graphics-gradients/gradient',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-colors/color\",\r\n\t\"./gradients\",\r\n\t\"./gradient-point\",\r\n\t\"./gradient-stop\"\r\n],function(langx,Color,gradients,GradientPoint,GradientStop) {\r\n\r\n\tvar Gradient = langx.klass({\r\n\r\n\t\t\"klassName\"\t:\t\"Gradient\",\r\n\r\n\t\t\"endPoint\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.endPoint;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"fromColor\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.fromColor;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"startPoint\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.startPoint;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"stops\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.stops;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"toColor\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.toColor;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\taddColorStop : function(offset,color) {\r\n\t\t\tthis._.stops.push(new GradientStop(offset,color));\r\n\t\t},\t\r\n\t\r\n\t\t\"_construct\"\t:\tfunction(){\r\n\t\t\tthis._ =  {\r\n            \t\tstops : []\r\n            \t}\r\n\t\t}\r\n\t\t\r\n\t});\r\n\r\n\treturn gradients.Gradient = Gradient;\r\n\t\r\n});\t\r\n\r\n\ndefine('skylark-graphics-gradients/linear-gradient',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-colors/color\",\r\n\t\"./gradients\",\r\n\t\"./gradient\",\r\n\t\"./gradient-point\",\r\n\t\"./gradient-stop\"\r\n],function(langx,Color,gradients,Gradient,GradientPoint,GradientStop) {\r\n\t\r\n\tvar LinearGradient = Gradient.inherit({\r\n\t\t\"klassName\"\t:\t\"LinearGradient\",\r\n\r\n\t\t\"angle\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.angle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"toString\" : function() {\r\n\t\t\tvar props = {\r\n\t\t\t\ttype : \"linear\",\r\n\t\t\t\twebkitGradType : \"linear\",\r\n\t\t\t\tstops : [],\r\n\t\t\t\twebKitPosn1 : this.startPoint.toString(),\r\n\t\t\t\twebKitPosn2 : this.endPoint.toString(),\r\n\t\t\t};\r\n\r\n\t\t\tprops.stops.push({\r\n\t\t\t\tcolor : Color.toCss(this.fromColor)\r\n\t\t\t});\r\n\r\n\t\t\tvar stops = this.stops;\r\n\t\t\tfor (var i=0;i<stops.length;i++){\r\n\t\t\t\tvar stop = stops[i];\r\n\t\t\t\tprops.stops.push({\r\n\t\t\t\t\tpos : stop.offset.toString(),\r\n\t\t\t\t\tcolor :stop.color.toString()\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprops.stops.push({\r\n\t\t\t\tcolor : this.toColor.toString()\r\n\t\t\t});\r\n\r\n\t\t\treturn CssUtils.buildBackgroundImage(props)[0];\r\n\t\t},\r\n\t\t\r\n\t\t\"_construct\"\t:\tfunction(params) {\r\n\t\t\tthis._ = {\r\n\t\t\t\t\"startPoint\":\tparams.startPoint,\r\n\t\t\t\t\"endPoint\"\t:\tparams.endPoint,\r\n\t\t\t\t\"fromColor\"\t:\tparams.fromColor,\r\n\t\t\t\t\"toColor\"\t:\tparams.toColor,\r\n\t\t\t\t\"angle\"\t\t:   params.angle\r\n\t\t\t};\r\n\r\n\t\t\tif (params.stops) {\r\n\t\t\t\tvar stops = params.stops;\r\n\t\t\t\tfor (var i = 0;i<stops.length;i++) {\r\n\t\t\t\t\tvar stop = stops[i];\r\n\t\t\t\t\tthis.addColorStop(stop.offset,stop.color);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tLinearGradient.fromString = function(s) {\r\n\t\tvar p = CssUtils.parseBackgroundImage(s);\r\n\t\tif (p.type == \"linear\" ) {\r\n\t\t\treturn new LinearGradient({\r\n\t\t\t\tstartPoint : p.webKitPosn1,\r\n\t\t\t\tendPoint   : p.webKitPosn2,\r\n\t\t\t\tfromColor  : p.stops[0].color,\r\n\t\t\t\ttoColor    : p.stops[p.stops.length-1].color,\r\n\t\t\t\tstops      : p.stops.slice(1,p.stops.length-1).map(function(item){\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toffset : item.pos,\r\n\t\t\t\t\t\tcolor : item.color\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn gradients.LinearGradient = LinearGradient;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-gradients/radial-gradient',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-graphics-colors/color\",\r\n\t\"./gradients\",\r\n\t\"./gradient\",\r\n\t\"./gradient-point\",\r\n\t\"./gradient-stop\"\r\n],function(langx,Color,gradients,Gradient,GradientPoint,GradientStop) {\r\n\r\n\r\n\tvar RadialGradient = Gradient.inherit({\r\n\t\t\r\n\t\t\"klassName\"\t:\t\"RadialGradient\",\r\n\r\n\t\t\"startRadius\" : {\r\n\t\t\ttype : Number,\r\n\t\t},\r\n\t\t\"endRadius\" : {\r\n\t\t\ttype : Number,\r\n\t\t},\r\n\t\t\t\r\n\t\t\"toString\" : function() {\r\n\t\t\tvar props = {\r\n\t\t\t\ttype : \"radial\",\r\n\t\t\t\twebkitGradType : \"radial\",\r\n\t\t\t\tstops : [],\r\n\t\t\t\twebKitPosn1 : this.startPoint.toString(),\r\n\t\t\t\twebKitPosn2 : this.endPoint.toString(),\r\n\t\t\t\twebKitRadius1 : this.startRadius && this.startRadius.toString(),\r\n\t\t\t\twebKitRadius2 : this.endRadius && this.endRadius.toString()\r\n\t\t\t};\r\n\r\n\t\t\tprops.stops.push({\r\n\t\t\t\tcolor : Color.toCss(this.fromColor)\r\n\t\t\t});\r\n\r\n\t\t\tvar stops = this.stops;\r\n\t\t\tfor (var i=0;i<stops.length;i++){\r\n\t\t\t\tvar stop = stops[i];\r\n\t\t\t\tprops.stops.push({\r\n\t\t\t\t\tpos : stop.offset.toString(),\r\n\t\t\t\t\tcolor : stop.color.toString()\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprops.stops.push({\r\n\t\t\t\tcolor : Color.toCss(this.toColor)\r\n\t\t\t});\r\n\r\n\t\t\treturn CssUtils.buildBackgroundImage(props)[0];\r\n\t\t},\t\r\n\t\t\r\n\t\t\"_construct\"\t:\tfunction(params) {\r\n\t\t\tthis._ = {\r\n\t\t\t\t\"startPoint\":\tparams.startPoint,\r\n\t\t\t\t\"endPoint\"\t:\tparams.endPoint,\r\n\t\t\t\t\"fromColor\"\t:\tparams.fromColor,\r\n\t\t\t\t\"toColor\"\t:\tparams.toColor,\r\n\t\t\t\t\"startRadius\"\t:   params.startRadius,\r\n\t\t\t\t\"endRadius\"\t\t:   params.endRadius,\r\n\t\t\t};\r\n\r\n\t\t\tif (params.stops) {\r\n\t\t\t\tvar stops = params.stops;\r\n\t\t\t\tfor (var i = 0;i<stops.length;i++) {\r\n\t\t\t\t\tvar stop = stops[i];\r\n\t\t\t\t\tthis.addColorStop(stop.offset,stop.color);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tRadialGradient.fromString = function(s) {\r\n\t\tvar p = CssUtils.parseBackgroundImage(s);\r\n\t\tif (p.type == \"radial\" ) {\r\n\t\t\treturn new RadialGradient({\r\n\t\t\t\tstartPoint : p.webKitPosn1,\r\n\t\t\t\tendPoint   : p.webKitPosn2,\r\n\t\t\t\tstartRadius: p.webKitRadius1,\r\n\t\t\t\tendRadius  : p.webKitRadius2,\r\n\t\t\t\tfromColor  : p.stops[0].color,\r\n\t\t\t\ttoColor    : p.stops[p.stops.length-1].color,\r\n\r\n\t\t\t\tstops      : p.stops.slice(1,p.stops.length-1).map(function(item){\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toffset : item.pos,\r\n\t\t\t\t\t\tcolor : item.color\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\treturn gradients.RadialGradient = RadialGradient;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-gradients/main',[\r\n\t\"./gradients\",\r\n\t\"./gradient\",\r\n\t\"./gradient-point\",\r\n\t\"./gradient-stop\",\r\n\t\"./linear-gradient\",\r\n\t\"./radial-gradient\"\r\n],function(gradients){\r\n\treturn gradients;\r\n});\r\n\r\n\ndefine('skylark-graphics-gradients', ['skylark-graphics-gradients/main'], function (main) { return main; });\n\n"]}